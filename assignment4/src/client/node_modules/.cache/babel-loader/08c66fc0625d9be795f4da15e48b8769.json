{"ast":null,"code":"var _jsxFileName = \"/Users/aikam320/Desktop/3309/webInterface/SE3309DBMS/client/src/pages/EvidenceTrends.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport useState from 'react-usestateref';\nimport img from '../images/police.jpeg';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { Container, Form, Row, Col, Image, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nexport default function EvidenceTrends() {\n  _s();\n\n  const [station, setStation] = useState([{}]);\n  const [selectedStation, setSelectedStation] = useState();\n  const [timeStart, setStartTime] = useState();\n  const [timeEnd, setEndTime] = useState();\n  const [displayChart, setDisplayChart] = useState(false); //display bar graph default false, until data is submitted then retrieved from db\n\n  const [evidenceType, setEvidenceType, evidenceTypeRef] = useState();\n  const [count, setCount, countRef] = useState();\n  ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n  let c = [];\n  const e = [];\n\n  function submit() {\n    //on button submit, get evidence trends with station and date input\n    axios.get('http://localhost:3005/trends/evidence/station', {\n      params: {\n        inputStation: selectedStation,\n        startTime: timeStart,\n        endTime: timeEnd\n      }\n    }).then(res => {\n      //set up all the states\n      if (res) {\n        res.data && res.data.map(record => {\n          e.push(record.evidenceType);\n          c.push(record.count);\n        });\n        setEvidenceType(e);\n        setCount(c);\n        setDisplayChart(true); //set display bar chart = true\n      }\n    });\n  }\n\n  useEffect(() => {\n    //on first page load, retrieve all station numbers form backend\n    axios.get('http://localhost:3005/trends/evidence/').then(res => {\n      if (res) {\n        setStation(res.data);\n      }\n    });\n  }, []);\n\n  function onChangeOption(event) {\n    //update everytime user changes station number\n    setSelectedStation(Number(event.target.value) + 1);\n  }\n\n  function onChangeStartTime(event) {\n    //update everytime user changes station number\n    setStartTime(JSON.stringify(event.target.value));\n  }\n\n  function onChangeEndTime(event) {\n    //update everytime user changes station number\n    setEndTime(JSON.stringify(event.target.value));\n  }\n\n  const options = {\n    //options for bar chart\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Evidence'\n      }\n    }\n  };\n  const chartData = {\n    //set chart data\n    labels: evidenceTypeRef.current,\n    datasets: [{\n      label: 'Occurance',\n      data: countRef.current,\n      backgroundColor: 'green'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Evidence Trends\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 3,\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Select Station #\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          class: \"btn btn-primary\",\n          onClick: submit,\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Select, {\n            as: \"select\",\n            onChange: onChangeOption,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Select...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this), station && station.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: index,\n              children: item.stationNo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Start Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"start time\",\n            onChange: onChangeStartTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"End Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"end time\",\n            onChange: onChangeEndTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          src: img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), displayChart ? /*#__PURE__*/_jsxDEV(Bar, {\n      options: options,\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EvidenceTrends, \"lggwiK3P/KlhQ2lnEmdeq9ydMHI=\");\n\n_c = EvidenceTrends;\n\nvar _c;\n\n$RefreshReg$(_c, \"EvidenceTrends\");","map":{"version":3,"sources":["/Users/aikam320/Desktop/3309/webInterface/SE3309DBMS/client/src/pages/EvidenceTrends.jsx"],"names":["React","useEffect","useState","img","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","Container","Form","Row","Col","Image","Button","axios","require","EvidenceTrends","station","setStation","selectedStation","setSelectedStation","timeStart","setStartTime","timeEnd","setEndTime","displayChart","setDisplayChart","evidenceType","setEvidenceType","evidenceTypeRef","count","setCount","countRef","register","c","e","submit","get","params","inputStation","startTime","endTime","then","res","data","map","record","push","onChangeOption","event","Number","target","value","onChangeStartTime","JSON","stringify","onChangeEndTime","options","responsive","plugins","legend","position","title","display","text","chartData","labels","current","datasets","label","backgroundColor","item","index","stationNo"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport useState from 'react-usestateref'\nimport img from '../images/police.jpeg';\nimport {Chart as ChartJS,CategoryScale,LinearScale,BarElement,Title,Tooltip,Legend} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { Container, Form, Row, Col, Image, Button} from 'react-bootstrap';\n\nconst axios = require('axios');\n\n\nexport default function EvidenceTrends () {\n    const [station, setStation] = useState([{}]);\n    const [selectedStation, setSelectedStation] = useState();\n    const [timeStart, setStartTime] = useState();\n    const [timeEnd, setEndTime] = useState();\n    const [displayChart, setDisplayChart]= useState(false);//display bar graph default false, until data is submitted then retrieved from db\n    const[evidenceType, setEvidenceType, evidenceTypeRef] = useState();\n    const[count, setCount, countRef] = useState();\n    ChartJS.register(CategoryScale,LinearScale,BarElement,Title,Tooltip,Legend);\n    let c = [];\n    const e = [];\n\n    function submit() {//on button submit, get evidence trends with station and date input\n        axios.get('http://localhost:3005/trends/evidence/station', {\n            params: {\n                inputStation: selectedStation,\n                startTime: timeStart,\n                endTime: timeEnd\n            }\n        })\n            .then((res) => {//set up all the states\n                if (res) {\n                res.data&&res.data.map((record) =>{\n                    e.push(record.evidenceType);\n                    c.push(record.count);\n                });\n\n                setEvidenceType(e)\n                setCount(c)\n                setDisplayChart(true);//set display bar chart = true\n                \n                }\n            });\n\n    }\n     \n    useEffect(() => {//on first page load, retrieve all station numbers form backend\n        axios.get('http://localhost:3005/trends/evidence/')\n            .then((res) => {\n                if (res) {\n                    setStation(res.data);\n                }\n            });\n    }, []);\n\n    \n    function onChangeOption (event) {//update everytime user changes station number\n        setSelectedStation((Number(event.target.value)+1));\n    }\n\n    function onChangeStartTime (event) {//update everytime user changes station number\n        setStartTime(JSON.stringify(event.target.value));\n    }\n\n    function onChangeEndTime (event) {//update everytime user changes station number\n        setEndTime(JSON.stringify(event.target.value));\n    }\n    \n    const options = {//options for bar chart\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n          title: {\n            display: true,\n            text: 'Evidence',\n          },\n        },\n    };\n      \n\n\n    const chartData = {//set chart data\n\n        labels: evidenceTypeRef.current,\n        datasets: [\n            {\n            label: 'Occurance',\n            data: countRef.current,\n            backgroundColor: 'green',\n            },\n        ],\n\n    \n    };\n  \n    return (\n        <Container fluid>\n            <Row>\n                <Col md={6}>\n                    <h1>Evidence Trends</h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={3}>\n                    <h5>Select Station #</h5>\n                    <Button type=\"submit\" class=\"btn btn-primary\" onClick={submit}>\n                        Enter\n\t\t\t\t    </Button>\n                </Col>\n\t\t        <Col md={3}>\n\t\t\t        <Form>\n                        <Form.Select as=\"select\" onChange={onChangeOption}>\n                            <option>Select...</option>\n                            {\n                            station && station.map((item, index)=> (\n                                <option value={index}>{item.stationNo}</option>\n                            ))}\n                        </Form.Select>\n                        <Form.Label>Start Time</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"start time\" onChange={onChangeStartTime}/>\n                        <Form.Label>End Time</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"end time\" onChange={onChangeEndTime}/>\n                    </Form>\n                </Col>\n                <Col md={6}>\n                   <Image src={img}/> \n                </Col>\n                {}\n            </Row>\n            {displayChart? \n                <Bar options={options} data={chartData} />\n                :\n                null\n            }\n        </Container>\n    )\n}"]},"metadata":{},"sourceType":"module"}